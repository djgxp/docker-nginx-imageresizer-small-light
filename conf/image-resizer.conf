map_hash_bucket_size 192;

map $http_accept $webp_enabled {
    default 0;
    "~*webp" 1;
}

map $image_uri $blacklisted {
    default 0;
    include blacklist.map;
}

server {
    # Uncomment for verbose debugging
    # error_log /var/log/nginx/error.log debug;

    # Uses small_light nginx mod with imagemagick
    # https://github.com/cubicdaiya/ngx_small_light

    listen   80; # listen for ipv4; this line is default and implied
    server_name _;
    server_tokens off;
    log_subrequest on;
    rewrite_log on;

    root /var/www/html/img.purch.com;

    # Needed to allow requested image uri protocol slashes from being merged (used when proxying for source image)
    merge_slashes off;

    # Will proxy to external urls and gets remote images, the following will allow it to resolve properly
    resolver 8.8.8.8;  # Google DNS

    # Allows us to respond to proxy redirects with things like error_page
    proxy_intercept_errors      on;
    proxy_pass_request_body     off;
    proxy_pass_request_headers  off;

    # Hide Amazon Headers
    proxy_hide_header           X-Amz-Id-2;
    proxy_hide_header           X-Amz-Request-Id;

    # Need to also handle HEAD requests
    proxy_method                GET;
    proxy_temp_path             /tmp/images;
    proxy_store_access          user:rw  group:rw  all:r;

    # This is the secret sauce to allow us to handle proxy redirects with image uri's
    recursive_error_pages       on;

    #Enable ngx_small_light
    small_light on;
    small_light_buffer 30m;

    location = /favicon.ico {
        log_not_found off;
    }

    # http://<host>/o/{image_url_base64_encoded}
    #
    # Commands:
    #   - o: original image just to have it in img.purch.com in https
    #
    # Examples:
    #   - http://<host>/o/aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL2ltYWdlL3VwbG9hZC9ib3JlZF9hbmltYXRpb24uZ2lm
    #
    location ~ "^/(o)/(.*)" {
        set $command $1;
        set $arg1 '';
        set $arg2 '';
        set $arg3 '';
        set $arg4 '';
        set $color '';
        set $format '';
        set $quality '';
        set $image_uri $2;
        set_decode_base64 $image_uri;

        # Use error_page to see if it's on disk, else try to generate it
        error_page 404 = @process;
        log_not_found off;
    }

    # http://<host>/{r|rc|rnb}/100x100[-{color_code}-{format:webp|gif|png|jpg}:{quality from 0 to 100}]/{image_url_base64_encoded}
    #
    # Commands:
    #   - r: resize proportional with borders
    #   - rnb: resize proportional without borders
    #   - rc: resize and crop proportional (not small_light, no webp, quality sticked to 85 )
    #
    # Examples:
    #   - http://<host>/r/250x200/aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL2ltYWdlL3VwbG9hZC9ib3JlZF9hbmltYXRpb24uZ2lm
    #   - http://<host>/r/250x200-webp/aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL2ltYWdlL3VwbG9hZC9ib3JlZF9hbmltYXRpb24uZ2lm
    #   - http://<host>/r/250x200-FF0000-jpg:90/aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL2ltYWdlL3VwbG9hZC9ib3JlZF9hbmltYXRpb24uZ2lm
    #   - http://<host>/rc/200x200/aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL2ltYWdlL3VwbG9hZC9ib3JlZF9hbmltYXRpb24uZ2lm
    #   - http://<host>/rnb/200x200/aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL2ltYWdlL3VwbG9hZC9ib3JlZF9hbmltYXRpb24uZ2lm
    #
    location ~ "^/(r|rnb|rc)/(-|\d+)x(-|\d+)-?([0-9A-Fa-f]{1,6})?-?(jpg|gif|png|webp)?(\:([1-9][0-9]?|100))?/(.*)" {
        set $command $1;
        set $arg1 $2;
        set $arg2 $3;
        set $arg3 '';
        set $arg4 '';
        set $color $4;
        set $format $5;
        set $quality $7;
        set $image_uri $8;
        set_decode_base64 $image_uri;

        # Use error_page to see if it's on disk, else try to generate it
        error_page 404 = @process;
        log_not_found off;
    }

    # https://github.com/cubicdaiya/ngx_small_light
    # Commands rotate, size, crop, resize, change format
    #
    # http://<host>/custom/({small_light_options like dw=100,dh=100,of=webp})/{image_url_base64_encoded}
    #
    # Examples:
    #   - http://<host>/custom/dw=200,dh=200,of=webp/aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL2ltYWdlL3VwbG9hZC9ib3JlZF9hbmltYXRpb24uZ2lm
    #
    location ~ ^/custom/([^/]+)/(.*) {
        set $command custom;
        set $arg1 $1;
        set $arg2 '';
        set $arg3 '';
        set $arg4 '';
        set $color '';
        set $format '';
        set $quality '';
        set $image_uri $2;
        set_decode_base64 $image_uri;

        # Use error_page to see if it's on disk, else try to generate it
        error_page 404 = @process;
        log_not_found off;
    }

    # http://<host>/c/100x100[-{x-y}-{format:webp|gif|png|jpg}:{quality from 0 to 100}]/{image_url_base64_encoded}
    #
    # Commands:
    #   - c: crop proportional with possibility to update image dimensions in canvas
    #
    # Examples:
    #   - http://<host>/c/200x200/aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL2ltYWdlL3VwbG9hZC9ib3JlZF9hbmltYXRpb24uZ2lm
    #   - http://<host>/c/200x200-200-200-webp/aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL2ltYWdlL3VwbG9hZC9ib3JlZF9hbmltYXRpb24uZ2lm
    #   - http://<host>/c/200x200-200-200-jpg:80/aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL2ltYWdlL3VwbG9hZC9ib3JlZF9hbmltYXRpb24uZ2lm
    #
    location ~ "^/(c)/(-|\d+)x(-|\d+)-?(\d+)?-?(\d+)?-?(jpg|gif|png|webp)?(\:([1-9][0-9]?|100))?/(.*)" {
        set $command $1;
        set $arg1 $2;
        set $arg2 $3;
        set $arg3 $4;
        set $arg4 $5;
        set $format $6;
        set $color '';
        set $quality $8;
        set $image_uri $9;
        set_decode_base64 $image_uri;

        # Use error_page to see if it's on disk, else try to generate it
        error_page 404 = @process;
        log_not_found off;
    }

    # http://<host>/rotate/{90|180|270}/{image_url_base64_encoded}
    #
    # Commands:
    #   - c: crop proportional with possibility to update image dimensions in canvas
    #
    # Examples:
    #   - http://<host>/rotate/90/aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL2ltYWdlL3VwbG9hZC9ib3JlZF9hbmltYXRpb24uZ2lm
    #
    location ~ ^/(rotate)/(90|180|270)-?(jpg|gif|png|webp)?(\:([1-9][0-9]?|100))?/(.*) {
        set $command $1;
        set $arg1 $2;
        set $arg2 '';
        set $arg3 '';
        set $arg4 '';
        set $color '';
        set $quality $5;
        set $format $3;
        set $image_uri $6;
        set_decode_base64 $image_uri;

        # Use error_page to see if it's on disk, else try to generate it
        error_page 404 = @process;
        log_not_found off;
    }

    # http://<host>/{w|h}/100[-{format:webp|gif|png|jpg}:{quality from 0 to 100}]/{image_url_base64_encoded}
    #
    # Commands:
    #   - r: resize proportional with borders
    #   - rnb: resize proportional without borders
    #   - rc: resize and crop proportional (not small_light so no webp)
    #
    # Examples:
    #   - http://<host>/h/250/aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL2ltYWdlL3VwbG9hZC9ib3JlZF9hbmltYXRpb24uZ2lm
    #   - http://<host>/h/250-webp:80/aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL2ltYWdlL3VwbG9hZC9ib3JlZF9hbmltYXRpb24uZ2lm
    #   - http://<host>/w/250/aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL2ltYWdlL3VwbG9hZC9ib3JlZF9hbmltYXRpb24uZ2lm
    #   - http://<host>/w/250-webp/aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL2ltYWdlL3VwbG9hZC9ib3JlZF9hbmltYXRpb24uZ2lm
    #
    location ~ ^/(w|h)/(-|\d+)-?(jpg|gif|png|webp)?(\:([1-9][0-9]?|100))?/(.*) {
        set $command $1;
        set $arg1 $2;
        set $arg2 '';
        set $arg3 '';
        set $arg4 '';
        set $color '';
        set $format $3;
        set $quality $5;
        set $image_uri $6;
        set_decode_base64 $image_uri;

        # Use error_page to see if it's on disk, else try to generate it
        error_page 404 = @process;
        log_not_found off;
    }

    # The named locations @jpeg, @png and @gif get evaluated in respective order for a file on disk.
    # The repetition is necessary because try_files / error_page only allow redirection for the final
    # fallback argument. These named locations clear mimetypes for this location and make the default
    # type be the type of resource on disk.
    #
    # This is essentially a work-around to allow for extensionless assets to be stored on disk.
    # The mimetype is being embedded in the path on disk by using the $upstream_http_content_type
    # from the proxied source when specifying proxy_store

    location @process {
        internal;
        add_header Dims-cached no;
        add_header X-Imageresizer-debug http://127.0.0.1:80/internal/$command?uri=$image_uri&arg1=$arg1&arg2=$arg2&arg3=$arg3&arg4=$arg4&color=$color&format=$format&quality=$quality&webp_enabled=$webp_enabled;
        add_header X-Imageresizer-blacklisted $blacklisted;
        error_page 500 502 503 504 = @fallback;

        if ($blacklisted) {
            return 500;
        }

        # Generate the image if it doesn't exist
        proxy_pass http://127.0.0.1:80/internal/$command?uri=$image_uri&arg1=$arg1&arg2=$arg2&arg3=$arg3&arg4=$arg4&color=$color&format=$format&quality=$quality&webp_enabled=$webp_enabled;

        # Store the image in proxy storage for later retrievals (using $uri as filename which is urldecoded but lacks $args)
        #proxy_store                 $document_root/$upstream_http_content_type/$uri;
    }

    location @process_redirect {
        internal;
        # Note: we are not reusing the @process named location since we don't want to save two copies on disk
        # Set the Location header for a redirect to a the image uri (further proxying will reset it)
        set $image_uri $upstream_http_location;

        # This is intended to be the exact url that's also in the @process named location
        proxy_pass http://127.0.0.1:80/internal/$command?uri=$image_uri&arg1=$arg1&arg2=$arg2&arg3=$arg3&arg4=$arg4&format=$format&quality=$quality&color=$color&webp_enabled=$webp_enabled;
    }

    location @fallback {
        internal;
        add_header X-Imageresizer-method fallback;
        add_header X-Imageresizer-blacklisted $blacklisted;
        add_header Dims-cached no;
        set $image_uri 'http://127.0.0.1:80/image/sample_error.jpg';

        # Generate the image if it doesn't exist
        proxy_pass http://127.0.0.1:80/internal/$command?uri=$image_uri&arg1=$arg1&arg2=$arg2&arg3=$arg3&arg4=$arg4&format=$format&quality=$quality&color=$color&webp_enabled=$webp_enabled;
    }

    location @empty {
        empty_gif;
    }

    location ~ /internal/o {
        allow 127.0.0.0/8;
        deny all;

        proxy_pass $arg_uri;
        add_header X-Imageresizer-method original;

        # Handle redirects
        error_page 301 302 307 = @process_redirect;
    }

    location ~ /internal/custom {
        allow 127.0.0.0/8;
        deny all;

        # We reset these variables because technically we're in a different request
        set $arg1 $arg_arg1;
        set $image_func "small_light($arg_arg1,e=imagemagick,jpeghint=y)";

        proxy_pass http://127.0.0.1:80/$image_func/$arg_uri;
        add_header X-Imageresizer-method custom;

        # Handle redirects
        error_page 301 302 307 = @process_redirect;
    }

    location ~ /internal/(c) {
        allow 127.0.0.0/8;
        deny all;

        # We reset these variables because technically we're in a different request
        set $command $1;
        set $arg1 $arg_arg1;
        set $arg2 $arg_arg2;
        set $arg3 $arg_arg3;
        set $arg4 $arg_arg4;
        set $format '';
        set $color ',cc=ffffff';
        set $quality 85;
        set $webp_enabled "$arg_format-$arg_webp_enabled";

        if ($arg_format ~ (jpg|gif|png) ) {
            set $format ',of=$arg_format';
        }

        if ($webp_enabled ~ '^-1$|^webp-1$'){
            set $format ',of=webp';
        }

        if ($format = '') {
            set $format ',of=jpg';
        }

        if ($arg_quality != '') {
            set $quality $arg_quality;
        }

        if ($arg_color != '') {
         set $color ",cc=$arg_color";
        }

        if ($arg3 = ''){
            set $arg3 "-";
        }

        if ($arg4 = ''){
            set $arg4 "-";
        }

        # Perform the filter
        set $image_func "small_light(cw=$arg1,ch=$arg2,dw=$arg3,dh=$arg4$format$color,q=$quality,e=imagemagick,jpeghint=y)";
        proxy_pass http://127.0.0.1:80/$image_func/$arg_uri;
        add_header X-Imageresizer-method crop;

        # Handle redirects
        error_page 301 302 307 = @process_redirect;
    }

    location ~ /internal/(rnb|w|h|rotate) {
        allow 127.0.0.0/8;
        deny all;

        # We reset these variables because technically we're in a different request
        set $command $1;
        set $arg1 $arg_arg1;
        set $arg2 $arg_arg2;
        set $format '';
        set $quality 85;
        set $webp_enabled "$arg_format-$arg_webp_enabled";

        if ($arg_format ~ (jpg|gif|png) ) {
            set $format ',of=$arg_format';
        }

        if ($webp_enabled ~ '^-1$|^webp-1$'){
            set $format ',of=webp';
        }

        if ($format = '') {
            set $format ',of=jpg';
        }

        if ($arg_quality != '') {
            set $quality $arg_quality;
        }

        if ($command = 'w'){
            add_header X-Imageresizer-method "width with proportions";
            set $arg1 $arg_arg1;
            set $arg2 "-";
        }

        if ($command = 'h'){
            add_header X-Imageresizer-method "height with proportions";
            set $arg1 "-";
            set $arg2 $arg_arg1;
        }

        set $image_func "small_light(dw=$arg1,dh=$arg2,ds=s,da=l$format,q=$quality,e=imagemagick,jpeghint=y)";

        if ($command = 'rotate'){
            add_header X-Imageresizer-method "rotate";
            set $image_func "small_light(angle=$arg_arg1$format,q=$quality,e=imagemagick,jpeghint=y)";
        }

#        if ($arg_uri ~* ^.+\.gif$){
#            set $image_func "gif";
#        }

        proxy_pass http://127.0.0.1:80/$image_func/$arg_uri;
        add_header X-Imageresizer-method "resize";

        # Handle redirects
        error_page 301 302 307 = @process_redirect;
    }

    location ~ /internal/(rc|r) {
        allow 127.0.0.0/8;
        deny all;

        # We reset these variables because technically we're in a different request
        set $command $1;
        set $arg1 $arg_arg1;
        set $arg2 $arg_arg2;
        set $format '';
        set $da 'l';
        set $color ',cc=ffffff';
        set $quality 85;
        set $webp_enabled "$arg_format-$arg_webp_enabled";

        if ($arg_color != '') {
            set $color ",cc=$arg_color";
        }

        if ($arg_format ~ (jpg|gif|png) ) {
            set $format ',of=$arg_format';
        }

        if ($webp_enabled ~ '^-1$|^webp-1$'){
            set $format ',of=webp';
        }

        if ($format = '') {
            set $format ',of=jpg';
        }

        if ($arg_quality != '') {
            set $quality $arg_quality;
        }

        if ($command = 'rc') {
            set $da 's';
        }

        set $image_func "small_light(dw=$arg1,dh=$arg2,cw=$arg1,ch=$arg2$color$format,da=$da,ds=s,q=$quality,e=imagemagick,jpeghint=y)";

#        if ($arg_uri ~* ^.+\.gif$){
#            set $image_func "gif";
#        }

        proxy_pass http://127.0.0.1:80/$image_func/$arg_uri;

        if ($command = 'r'){
            add_header X-Imageresizer-method "resize with borders";
        }

        if ($command = 'rc'){
            add_header X-Imageresizer-method "resize and crop";
        }

        # Handle redirects
        error_page 301 302 307 = @process_redirect;
    }

    location ~ ^/small_light[^/]*/(.+)$ {
        allow 127.0.0.0/8;
        deny all;

        set $imageurl $1;
        proxy_pass $imageurl;
        error_page 415 = @fallback;
    }
}